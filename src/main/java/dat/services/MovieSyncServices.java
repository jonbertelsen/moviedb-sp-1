package dat.services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import dat.dtos.MovieDTO;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class MovieSyncServices {

    private static final String DISCOVER_MOVIE_URI = "https://api.themoviedb.org/3/discover/movie";
    private static final String BASE_QUERY_PARAM = "include_adult=false&include_video=false&page=%d&%s&%s&sort_by=original_title.asc&with_origin_country=DK";
    private static final String MOVIE_DETAILS_URI = "https://api.themoviedb.org/3/movie/%d?append_to_response=credits";

    public static int[] movieIdsTiny = {1107959,  1184399, 1100057, 1045530 };
    public static int[] movieIds = {1107959, 1184399, 1100057, 1045530, 1030093, 1050493, 853561, 806837, 667651, 951168, 734164, 816347, 1291359, 1107032, 805684, 1119173, 649898, 1163856, 1163182, 1092328, 816969, 686756, 1049720, 1083861, 981145, 1103428, 951037, 1174005, 1030196, 679064, 1217216, 1048761, 946086, 1027513, 649594, 1172078, 1055323, 950873, 943435, 1232346, 836009, 739194, 1292332, 1244091, 949622, 811017, 1058938, 962737, 1249267, 706467, 987572, 1081039, 851345, 637201, 1353670, 898867, 1241882, 1024772, 1312929, 652328, 682633, 1108591, 1196851, 1029658, 902591, 687002, 1312407, 950874, 969853, 1237423, 660333, 662892, 881739, 1047128, 726152, 1173002, 1261819, 1327945, 1020308, 1102036, 897045, 1191713, 1277191, 827369, 950996, 666097, 1275299, 1178064, 566960, 816352, 1230770, 995169, 1317073, 686990, 980026, 1257552, 755929, 674884, 1320297, 996259, 1125611, 644212, 1275455, 1050668, 926139, 814922, 1301781, 1270898, 1108271, 787282, 1083482, 983524, 1091330, 1055312, 1029495, 929619, 1316710, 1263071, 717804, 976339, 736958, 1012089, 1170574, 760748, 790876, 1242199, 845497, 718135, 1277437, 1305258, 1277320, 1140958, 1137680, 912483, 1130197, 1103649, 832340, 1268289, 839095, 1079201, 1183202, 1284021, 587311, 1082462, 950875, 826989, 1224576, 1234995, 1234997, 949346, 962709, 792420, 1270643, 671862, 1047914, 1202364, 703822, 1353894, 686937, 1005164, 1316860, 617906, 660354, 741285, 1182747, 665482, 866587, 1321651, 1161091, 1078856, 1262920, 1249244, 897048, 986920, 945459, 799218, 812784, 1277438, 756406, 686987, 1358369, 1075744, 1279958, 1090638, 1108269, 1245233, 1088899, 639514, 957176, 889321, 697558, 1236687, 950992, 785944, 714932, 1224229, 1217245, 1108142, 660942, 1340482, 1220815, 758311, 1075300, 1277456, 1245242, 1325566, 706756, 750605, 969975, 709152, 959823, 1169544, 662765, 1078249, 759056, 958231, 1035657, 1249306, 1140438, 736336, 1102384, 1065666, 776542, 836556, 1232769, 1105045, 843008, 826730, 836557, 1098811, 1130425, 1030919, 897046, 1076248, 741099, 899725, 936842, 1176246, 798790, 1219054, 1013625, 832306, 994362, 1278250, 1173631, 1047141, 951002, 799475, 1220696, 1000930, 1102579, 1227125, 580175, 1223153, 809359, 586742, 1173120, 943417, 816486, 741101, 880476, 853361, 1031275, 1315563, 1031870, 949606, 1115293, 1181200, 833627, 1210993, 1113448, 759609, 1201483, 884429, 1206405, 1249302, 1154066, 1019835, 816367, 1136350, 1151582, 1028795, 950985, 1180571, 816348, 1278804, 1135071, 704679, 1249304, 1181222, 571687, 1304112, 666232, 684377, 1129805, 849586, 1107922, 1118938, 1108168, 829256, 1304451, 1271270, 1115377, 924461, 1108164, 1054996, 1046766, 686048, 713480, 1277241, 659993, 784449, 970935, 639753, 950879, 1030917, 1308118, 661167, 1266525, 705052, 1140780, 916627, 948791, 972912, 1196937, 1180595, 1283143, 1277249, 1316490, 751553, 918459, 1243151, 1215379, 733372, 1082615, 1098797, 631948, 1108284, 1173484, 1120421, 649534, 1205662, 1232305, 875808, 1249250, 1020062, 809365, 1166968, 1182478, 977933, 680813, 1054847, 1055332, 1196640, 1053927, 742862, 816376, 1188736, 782895, 863070, 1101279, 1173858, 794780, 1277256, 950995, 1180793, 1309767, 1136917, 1337617, 843063, 813100, 1339624, 1173635, 1108549, 697818, 864342, 799645, 1207126, 988474, 986812, 1203506, 1245224, 1067243, 686981, 661828, 960030, 1067230, 865849, 1086677, 616619, 1205006, 976326, 1270901, 950997, 1288724, 1008371, 950993, 592397, 1010616, 1026148, 950878, 660040, 748014, 972382, 1116322, 1226857, 1140999, 742865, 1108008, 1096083, 799487, 1202334, 1275982, 836561, 1234261, 814424, 622968, 743157, 865583, 1118933, 802110, 741103, 1022459, 684796, 1339861, 816413, 875180, 1286233, 1136909, 809369, 1211416, 1057195, 1116120, 1281090, 1173992, 897050, 923428, 1264248, 652990, 1081002, 913319, 1154054, 1218742, 1278947, 1292085, 725477, 948783, 816417, 950984, 1108278, 794443, 928747, 1032176, 611066, 1227778, 1278898, 865504, 1025812, 986289, 1088100, 785089, 924980, 1205706, 824007, 886395, 747699, 959761, 565394, 1193147, 750223, 707459, 1154956, 1202178, 714299, 1110924, 1136910, 643337, 1340139, 651378, 816418, 1173996, 1085221, 752908, 1247529, 787928, 854358, 825806, 1050280, 1244090, 816423, 1174673, 950882, 897155, 662310, 1279936, 1098808, 837751, 1320814, 1005290, 1107950, 1102497, 978006, 1339637, 653588, 1023814, 1105329, 816426, 1320386, 875271, 1042171, 1114746, 1067234, 1019919, 763109, 622124, 1125607, 898683, 1288664, 749900, 1076589, 1192057, 848139, 1303028, 1129813, 1262716, 784948, 1176266, 1019932, 1023590, 1035422, 1019321, 1337663, 738702, 1173834, 910446, 1140782, 684901, 700037, 1048418, 816429, 741105, 971589, 981978, 964318, 1043233, 890374, 1353426, 671125, 951047, 827218, 714704, 950890, 1019319, 749902, 1155063, 844424, 950981, 921505, 1190590, 1108264, 815061, 925210, 950989, 1053798, 885821, 1172656, 934287, 655713, 813098, 1212643, 1080995, 622129, 1263917, 629952, 1353949, 705842, 655297, 914346, 1022266, 991266, 1205860, 1237693, 1030009, 1301775, 990691, 932355, 522893, 1101755, 943419, 1030766, 1275211, 906151, 663692, 1108138, 978060, 652720, 684553, 1249287, 1108270, 1208619, 1148383, 1148396, 755199, 1277584, 1173625, 883205, 948787, 679679, 1088378, 705852, 1137260, 1023942, 1083473, 1098815, 885021, 816193, 817577, 733379, 876214, 848735, 1210592, 1199941, 1241851, 666799, 816431, 989589, 1295020, 816612, 1027654, 1237689, 1061064, 1024872, 1308657, 1121919, 1116713, 1239621, 931825, 1278223, 725234, 1030299, 1241287, 1273809, 1044149, 1247616, 818723, 757910, 1358380, 1032035, 756552, 1115622, 659940, 659370, 788965, 667086, 949637, 848720, 1277286, 1271735, 652377, 715071, 1160823, 1306757, 965810, 1173851, 816435, 982323, 1019434, 1079202, 645884, 1064754, 1067511, 1162857, 1295266, 848731, 1101218, 784342, 1249295, 816375, 1249298, 1181351, 814667, 1305844, 795367, 1277289, 830668, 1130438, 606226, 901234, 1036221, 949591, 716058, 686984, 1230328, 1181047, 1164884, 773635, 1094504, 1139352, 716059, 1148138, 944849, 1168560, 949598, 1077701, 1030214, 603094, 1137197, 1004678, 1108276, 1351871, 734112, 1084395, 1039400, 1240287, 1283798, 1290697, 974816, 950881, 1139094, 633054, 902407, 1136913, 1278243, 938600, 1025175, 1029880, 879233, 939111, 1182622, 1341413, 1077045, 694124, 1276532, 890592, 1108589, 523528, 874036, 1121064, 811815, 1224583, 794594, 1120543, 752910, 1048335, 1108154, 882036, 1019315, 1078137, 1249291, 1277300, 1173010, 918627, 1140995, 632478, 1108273, 1084951, 1037711, 1057107, 766773, 1098804, 577081, 1299009, 950994, 1213422, 797307, 789710, 676685, 910499, 1108280, 741106, 872508, 1119197, 1279965, 794901, 873139, 1270077, 656274, 1208597, 1288265, 927817, 949950, 706485, 1328148, 897387, 1353505, 1316739, 1309006, 1120078, 1217226, 776554, 1227199, 975303, 701279, 666792, 519464, 1277308, 1244970, 1048365, 1276963, 978285, 1078794, 1277482, 924065, 1210469, 809168, 816490, 1221289, 1019314, 1111645, 1297693, 818646, 950988, 716660, 935436, 1101554, 1139577, 1220044, 717941, 964308, 663870, 654699, 1092337, 971468, 950884, 1179227, 1181816, 1222064, 939193, 1140996, 901251, 1061858, 869038, 1163513, 1119544, 880457, 790418, 656244, 1228300, 1136532, 949036, 658806, 1289715, 749438, 686972, 950885, 538715, 1111483, 1137395, 752911, 1141080, 1046759, 676220, 711017, 686592, 1277699, 1300500, 1285195, 1277680, 1108174, 1091357, 776259, 1053273, 1025176, 1019313, 586947, 1136124, 1136101, 949592, 1054150, 1351862, 547066, 950982, 799484, 1158395, 718262, 1278257, 718266, 816380, 650031, 831291, 1297476, 816525, 1329679, 785589, 759779, 1247537, 1289599, 1298962, 766105, 926157, 1271287, 974052, 807263, 1326722, 1027342, 1249269, 686699, 722278, 1237744, 1173846, 1130408, 679683, 1195396, 693149, 787952, 1031050, 904686, 1079272, 833339, 1118944, 949615, 1203938, 1278241, 1278244, 918628, 1096505, 1277413, 1061658, 1176704, 820430, 1172084, 1097756, 950987, 1277327, 663263, 750531, 848181, 1298219, 1172142, 1133068, 1339859, 1171372, 741100, 924123, 948788, 889749, 934039, 740359, 949634, 1320554, 1080159, 778819, 869642, 1030711, 950889, 1028810, 816544, 967905, 1255174, 1108177, 924773, 1047283, 686775, 1202859, 742850, 666240, 980640, 1220819, 1159893, 956443, 520390, 618265, 787265, 1047019, 1175400, 822099, 1075755, 646376, 962236, 751490, 1153416, 1138253, 750409, 1283767, 1245200, 757538, 1262571, 913849, 1145085, 662951, 662070, 1279221, 995804, 804052, 916190, 1054563, 1120115, 1069240, 848725, 668755, 1218241, 1235594, 816364, 1301741, 743232, 991277, 875199, 684280, 1339615, 1108266, 1277484, 1019311, 1205456, 1076587, 848722, 784942, 679817, 1027981, 1247285, 1172127, 859585, 685613, 1108450, 950990, 1248626, 1306963, 1108279, 799644, 1130947, 949596, 724578, 746334, 797116, 881727, 1058690, 986672, 1205660, 1246106, 1339064, 726187, 1097176, 756643, 875659, 847051, 724602, 949693, 686224, 818837, 1052820, 1316583, 1201554, 1087599, 1245059, 1075823, 1182687, 950979, 1085218, 708946, 518245, 1139582, 817592, 958234, 571655, 1102785, 960206, 1355274, 1317159, 869166, 1108283, 1111825, 1014043, 1160827, 831970, 686876, 756524, 674036, 1163765, 1072444, 1075863, 1124080, 631491, 799641, 1140998, 776717, 1334304, 878815, 895735, 1108167, 653312, 1113120, 877801, 767340, 767094, 756386, 772277, 787957, 1245202, 1277121, 702557, 1112968, 755201, 1174003, 951000, 1300371, 916784, 577060, 686994, 854788, 827330, 724622, 1181510, 1277125, 976345, 782777, 1049197, 811176, 708974, 1028807, 824001, 1285004, 848136, 1249245, 631878, 799485, 1073668, 734434, 667156, 1084410, 1220704, 1091316, 740500, 594945, 811155, 1240817, 1033894, 1031315, 809371, 977154, 1271578, 1108268, 1120081, 913743, 1340220, 1173990, 1338716, 1337666, 850020, 731131, 947987, 1340228, 728886, 889699, 796164, 949600, 788977, 592814};
    public static int[] testMovieIds = {778819, 1317159, 1108283};  // nr. 3: 1108283

    // <editor-fold desc="Get an int-array of movie ids released after a certain date">

    // *** get a list of ids of all movies that are danish and are released after 2019-09-18 **
    public static int[] getDanishMovieIdsReleasedAfter(LocalDate releaseDate, int page) {

        try {
            String jsonString = getAllDanishMoviesReleasedAfterAsString(releaseDate, page);
            int numberOfPages = getNumberOfPages(jsonString);
            System.out.println("Number of pages: " + numberOfPages);
            // Extract the first 20 movie ids from jsonString
            List<Integer> movieIds = extractMovieIds(jsonString);
            // Extract the rest of the movie ids from the remaining pages
            for (int pageNumber = 2; pageNumber <= numberOfPages; pageNumber++) {
                jsonString = getAllDanishMoviesReleasedAfterAsString(releaseDate, pageNumber);
                movieIds.addAll(extractMovieIds(jsonString));
            }
            return movieIds.stream().mapToInt(Integer::intValue).toArray();
        }
        catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    public static int getNumberOfPages(String jsonString) {
        return JsonServices.extractTotalPages(jsonString);
    }

    private static List<Integer> extractMovieIds(String jsonString) throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode rootNode = objectMapper.readTree(jsonString);
        JsonNode resultsNode = rootNode.path("results");

        List<Integer> movieIds = new ArrayList<>();

        for (JsonNode movieNode : resultsNode) {
            int movieId = movieNode
                    .path("id")
                    .asInt();
            movieIds.add(movieId);
        }
        return movieIds;
    }

    public static String getAllDanishMoviesReleasedAfterAsString(LocalDate releaseDate, int page) {
        String primaryReleaseDateLTE = "primary_release_date.lte=" + LocalDate.now();
        String primaryReleaseDateGTE = "primary_release_date.gte=" + releaseDate;
        String uri = DISCOVER_MOVIE_URI + "?" + BASE_QUERY_PARAM.formatted(page, primaryReleaseDateGTE, primaryReleaseDateLTE);

        HttpResponse<String> response;
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest
                    .newBuilder()
                    .header("Authorization", "Bearer " + System.getenv("access_token_auth"))
                    .uri(new URI(uri))
                    .GET()
                    .build();
            response = client.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return response.body();
            } else {
                System.out.println("GET request failed. Status code: " + response.statusCode());
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    // </editor-fold>

    // <editor-fold desc="Get movie details in a syncronous manner">

    public static List<MovieDTO> getMovieDetails(int[] movieIds) {
        List<MovieDTO> movieDTOs = new ArrayList<>();
        for (int movieId : movieIds) {
            try {
                String jsonString = getMovieDetailsAsString(movieId);
                System.out.println(jsonString);
                ObjectMapper objectMapper = new ObjectMapper();
                MovieDTO movieDTO = objectMapper.readValue(jsonString, MovieDTO.class);
                movieDTOs.add(movieDTO);
            }
            catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }
        return movieDTOs;
    }

    private static String getMovieDetailsAsString(int movieId) {
        String uri = MOVIE_DETAILS_URI.formatted(movieId);
        HttpResponse<String> response;
        try {
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest
                    .newBuilder()
                    .uri(new URI(uri))
                    .header("Authorization", "Bearer " + System.getenv("access_token_auth"))
                    .GET()
                    .build();
            response = client.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == 200) {
                return response.body();
            } else {
                System.out.println("GET request failed. Status code: " + response.statusCode());
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    //</editor-fold>

}
